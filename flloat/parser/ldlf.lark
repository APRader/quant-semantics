start: ldlf_formula

?ldlf_formula:  ldlf_equivalence
?ldlf_equivalence: ldlf_implication (EQUIVALENCE ldlf_implication)*
?ldlf_implication: ldlf_or (IMPLY ldlf_or)*
?ldlf_or: ldlf_and (OR ldlf_and)*
?ldlf_and: ldlf_unaryop (AND ldlf_unaryop)*

?ldlf_unaryop:     ldlf_box
             |     ldlf_diamond
             |     ldlf_not
             |     ldlf_wrapped
?ldlf_box: BOXLSEPARATOR regular_expression BOXRSEPARATOR ldlf_unaryop
?ldlf_diamond: DIAMONDLSEPARATOR regular_expression DIAMONDRSEPARATOR ldlf_unaryop
?ldlf_not: NOT ldlf_unaryop
?ldlf_wrapped:    ldlf_atom
             |    LSEPARATOR ldlf_formula RSEPARATOR
?ldlf_atom:   ldlf_tt
          |   ldlf_ff
          |   ldlf_last
          |   ldlf_end
          |   ldlf_prop_true
          |   ldlf_prop_false
          |   ldlf_prop_atom

ldlf_prop_true: TRUE
ldlf_prop_false: FALSE
ldlf_prop_atom: SYMBOL_NAME

ldlf_tt: TT
ldlf_ff: FF
ldlf_last: LAST
ldlf_end: END

regular_expression: re_union

?re_union:      re_sequence (UNION re_sequence)*
?re_sequence:   re_star (SEQ re_star)*
?re_star:       re_test STAR?
?re_test:       TEST ldlf_formula
        |       re_wrapped
?re_wrapped:    re_propositional
           |    LSEPARATOR regular_expression RSEPARATOR
re_propositional: propositional_formula


BOXLSEPARATOR: "["
BOXRSEPARATOR: "]"
DIAMONDLSEPARATOR: "<"
DIAMONDRSEPARATOR: ">"
UNION: "+"
SEQ: ";"
TEST: "?"
STAR: "*"
TT.2: /(?i:tt)/
FF.2: /(?i:ff)/

%ignore /\s+/

%import .pl.propositional_formula
%import .pl.TRUE -> TRUE
%import .pl.FALSE -> FALSE
%import .pl.SYMBOL_NAME -> SYMBOL_NAME
%import .pl.EQUIVALENCE -> EQUIVALENCE
%import .pl.IMPLY -> IMPLY
%import .pl.OR -> OR
%import .pl.AND -> AND
%import .pl.NOT -> NOT
%import .pl.LSEPARATOR -> LSEPARATOR
%import .pl.RSEPARATOR -> RSEPARATOR
%import .ltlf.LAST -> LAST
%import .ltlf.END -> END

